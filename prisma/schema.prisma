// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OrderBook {
  id                      String   @id @default(cuid())
  orderID                 Int      @unique
  currencyPair            String  
  size                    Int
  type                    OrderType
  side                    SideType
  timeInForce             TimeInForceType
  statusType              OrderStatusType
  remaining               Int
  stopPrice               Int
  limitPrice              Int
  trailingAmount          Int
  metadata                Json
  userId    String        

  createdAt               DateTime @default(now()) @db.Timestamp(6)
  updateAt                DateTime @updatedAt @db.Timestamp(6)

  user                    User @relation(fields: [userId], references: [id])

  @@map("orderBook")
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId     String
  coinId    String

  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, coinId])
  @@map("userFavorite")
}

model User {
  id                   String         @id @default(cuid())
  safeAddress          String         @unique
  userAddress          String         @unique
  modulusCustomerEmail String?        // Rename to email (accross all)
  username             String?        @unique
  publicID             String         @unique
  timezone             String?
  currency             String?
  language             String?
  emailAnnouncements   Boolean        @default(false)
  emailNewsletter      Boolean        @default(false)
  emailTradeUpdates    Boolean        @default(false)
  activities           UserActivity[]
  autoLogoutDuration   Int?
  lastLoggedInAt       DateTime       @default(now()) @db.Timestamp(6)
  createdAt            DateTime       @default(now()) @db.Timestamp(6)
  updateAt             DateTime       @updatedAt @db.Timestamp(6)

  orders               OrderBook[]
  favorites            UserFavorite[]

  @@map("user")
}

model AuditLog {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  changes   Json
  createdAt DateTime @default(now()) @db.Timestamp(6)

  @@map("auditLog")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String?
  ipAddress String
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  body      String?
  response  Json
  success   Boolean
  timestamp DateTime @default(now()) @db.Timestamp(6)

  @@map("userActivity")
}

model CoinGeckoResponse {
  id        String                @id @default(cuid())
  type      CoinGeckoResponseType @unique
  data      Json[]
  createdAt DateTime              @default(now()) @db.Timestamp(6)
  updatedAt DateTime              @updatedAt @db.Timestamp(6)

  @@map("coingeckoResponse")
}

enum CoinGeckoResponseType {
  MARKET_DATA
  TRENDING_DATA
  TOPGAINERLOSER_DATA
  NEWLISTED_DATA
}

enum TimeInForceType {
	TIF_NONE
	// handled same as default of NONE
	TIF_GTC
	// not currently implemented, needs external "close session" request since exchange is 24/7
	TIF_DAY
	TIF_IOC
	TIF_FOK
}

enum SideType {
	SIDE_NONE
	SIDE_BUY
	SIDE_SELL
}

enum OrderType {
	ORDER_TYPE_NONE
	ORDER_TYPE_MARKET
	ORDER_TYPE_LIMIT
	ORDER_TYPE_STOP_MARKET
	ORDER_TYPE_STOP_LIMIT
	// unsupported, and might need to be done externally due to latency concerns
	ORDER_TYPE_TRAILING_STOP_LIMIT
	// unsupported, and might needs to be done externally due to latency concerns
	ORDER_TYPE_TRAILING_STOP_MARKET
}

enum OrderStatusType {
	ORDER_STATUS_NONE                             //0
	ORDER_STATUS_ACCEPTED                         //1
	ORDER_STATUS_PARTIALLY_FILLED                 //2
	ORDER_STATUS_FILLED                           //3
	ORDER_STATUS_CANCELLED                        //4
	ORDER_STATUS_REJECTED                         //5
	ORDER_STATUS_EXPIRED                          // 6 not used
	ORDER_STATUS_ORDER_STATUS_END                 //7
	ORDER_STATUS_CANCEL_ACCEPTED                  //8
	ORDER_STATUS_CANCEL_REJECTED                  //9
	ORDER_STATUS_STOP_ACTIVATED                   //10
}
